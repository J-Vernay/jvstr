/*
This is the C header for the StrAlloc structure of the jvstr library, written by Julien Vernay ( jvernay.fr ) in 2021.
It contains both the API and the documentation.
jvstr is a library to manipulate strings in the C language.
The library is available under the Boost Software License 1.0, whose terms are below:

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
#ifndef JVSTR_STRALLOC
#define JVSTR_STRALLOC

#ifdef __cplusplus
extern "C" {
#endif

#include <stdarg.h>

#include "StrView.h"


// Handle to heap-allocated and null-terminated string (except if size = 0, in which case array may be NULL).
// Characters may be modified directly (like `mystr.array[i] = 'x';`).
// However, both the size and capacity are read-only and shall not be modified directly.
// Most importantly, it can be initialized with {0} and functions will handle it correctly.
typedef struct StrAlloc {
    char* array; // access to the stored characters.
    size_t size; // read-only, size of the string. mystr.array[mystr.size] == '\0'
    size_t capacity; // read-only, maximum size of the string such that no reallocation will occur.
} StrAlloc;

#define STRALLOC_ASVIEW(stralloc) (StrView) { stralloc.array, stralloc.size }

// In all the functions below, if memory allocation fails (malloc returns NULL), exit() is called.

// Make a StrAlloc which holds the initial_content.
StrAlloc StrAlloc_make(StrView initial_content);

// This will free the storage owned by the string. `str` will be reset to {0} and can be used directly in other functions.
void StrAlloc_destroy(StrAlloc* str);

// Ensures `str->capacity >= new_capacity`, performing reallocation if needed.
void StrAlloc_reserve(StrAlloc* str, size_t new_capacity);


// WARNING: in _append() and _insert(), 'view' MUST NOT point into 'str' !

// Inserts 'view' at the end of 'str'.
void StrAlloc_append(StrAlloc* str, StrView view);

// Inserts the content of `view` at `position` (0 being the beginning) inside `str`.
void StrAlloc_insert(StrAlloc* str, StrView view, size_t position);


// Returns a new StrAlloc containing the result of a printf-like formatting.
StrAlloc jvstr_sprintf(char const* format, ...);
StrAlloc jvstr_vsprintf(char const* format, va_list vlist);

#ifdef __cplusplus
}
#endif

#endif
